1.아래를 프로그래밍 하시오.

하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

### 문제_01
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

class Student {
	private String name;
	private String dept;
	private String number;
	private double grade;

	public Student(String name, String dept, String number, double grade) {
		this.name = name;
		this.dept = dept;
		this.number = number;
		this.grade = grade;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDept() {
		return dept;
	}

	public void setDept(String dept) {
		this.dept = dept;
	}

	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public double getGrade() {
		return grade;
	}

	public void setGrade(double grade) {
		this.grade = grade;
	}

	public void findStudent(String name) {
		if (name.equals(this.name)) {
			System.out.println(this.name + this.dept + this.number + this.grade);
		}
	}

}

public class Test5 {

	public static void main(String[] args) {
		final int STU_NUM = 4;

		Scanner sc = new Scanner(System.in);
		System.out.println("이름 학과 학번 평균을 입력하세요");

		ArrayList<Student> arrList = new ArrayList<>();

		for (int i = 0; i < STU_NUM; i++) {
			System.out.print(">>");
			String text = sc.nextLine(); // 한줄전체로 받고

			StringTokenizer st = new StringTokenizer(text, ",");
			String name = st.nextToken().trim();
			String dept = st.nextToken().trim();
			String number = st.nextToken().trim();
			double grade = Double.valueOf(st.nextToken().trim());

			arrList.add(new Student(name, dept, number, grade)); // 입력
		}

		for (int i = 0; i < arrList.size(); i++) { // 출력
			System.out.print("----------------------");
			Student student = arrList.get(i);

			System.out.println("이름: " + student.getName());
			System.out.println("학과: " + student.getDept());
			System.out.println("학번: " + student.getNumber());
			System.out.println("학점평균: " + student.getGrade());
		}

		System.out.println("-------------------");

		while (true) {
			System.out.println("학생 이름 >>");
			String name = sc.next();

			if (name.equals("그만"))
				break;
			for (int i = 0; i < arrList.size(); i++) {
				Student s = arrList.get(i);
				s.findStudent(name);
			}
		}
		System.out.println("그만");
	}
}

학생마다 Student 객체를 생성하고 4명의 학생 정보를 `ArrayList<Student> 컬렉션`에 저장한 후에, 
ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력 받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.
=>

### 문제_02

ArayList<Student> 대신, `HashMap<String, Studnet>` **해시맵을 이용하여 다시 작성**하라. 해시맵에서 키는 학생 이름으로 한다.




2.. 다음을 프로그래밍 하시오. 

"그만"이 입력될 때까지 나라 이름과 인구를 입력 받아 저장하고, 다시 나라 이름을 입력받아 인구를 출력하는 프로그램을 작성하라. 
다음 해시맵을 이용하라.
=================================================================================
나라 이름과 인구를 입력하세요.(예: Korea 5000)
나라 이름, 인구 >> Korea 5000
나라 이름, 인구 >> USA 1000000
나라 이름, 인구 >> Swiss 2000
나라 이름, 인구 >> France 3000
나라 이름, 인구 >> 그만

인구 검색 >> France
France의 인구는 3000
인구 검색 >> 스위스
스위스 나라는 없습니다.
인구 검색 >> 그만
=>public class Test6 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		System.out.println("나라 이름과 인구를 입력하세요");
	
		HashMap<String, Integer> countryMap = new HashMap<>();
		
		while(true) {
			System.out.println("나라 이름, 인구 >>");
			String country = sc.next();
			
			if(country.equals("그만"))
				break;
			Integer people = sc.nextInt();
			countryMap.put(country, people);	
		}
		
		while(true) {
			System.out.println("인구 검색 >>");
			String country = sc.next();
			if(country.equals("그만"))
				break;
			Integer people = countryMap.get(country);
			if(people == null) {
				System.out.println(country +"인구는 없습니다");
			}else {
				System.out.println(country+ "의 인구는" + people );
				
			}
		}
		
	}


3. 스택과 큐에 대하여 설명하시오.

▶ 스택(Stack)
- 데이터의 입력과 출력 순서 :  가장 마지막에 넣은 데이터를 가장 먼저 꺼낸다.


▶큐(Queue)
- 제일 먼저 넣은 데이터를 가장 먼저 꺼낸다.


4. Map 에 대하여 설명하시오.
-Map인터페이스는 컬렉션 인터페이스와는 다른 저장방식을 가지고 있다. 
Map인터페이스를 구현한 Map컬렉션들은 키와 값을 하나의 쌍으로 저장하는 방식인 Key-Value방식을 사용한다. 여기에서 Key는 실질적인 값을 찾기 위한 이름의 역할을 한다.
또한 요소의 저장순서를 유지하지 않으며 Key는 중복허용을 하지 않지만 값은 중복허용을 한다.

5.아래의 TreeMap의 전체 Value 값을 확인 하기 위한 소스를 짜시오. 

TreeMap<Integer, String> map = new TreeMap<>();
map.put(45, "Brown");
map.put(37, "James");
map.put(23, "Martin");

6.아래의 IntegerComparator를 내림차순 정렬이 되게끔 구현하시오.
public static void main(String[] args) {
        TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
        tr.add(30);
        tr.add(10);    
        tr.add(20);        
        System.out.println(tr);	
    }
}


