1. Object클래스의 11개 함수를 나열해 보시오.
그중 우리가 외워야 할 함수들은 찍어 보세요 ㅎㅎ
*(1) toString()
- Object 클래스에서 기본으로 제공.
- 객체 정보를 문자열(String) 으로 바꿔줌. 
- Object 클래스를 상속받은 모든 클래스는 toString()을 재정의 할 수 있음.
- 인스턴스 정보를 문자열로 반환하는 메서드.


*(2) equals() 원래기능 : 두 인스턴스의 주소값을 비교하여 boolean 값(true, false)을 반환.
*(3) hashCode()
*(4) clone()
(5)finalize()
(6)getClass()
(7)notify()
(8)notifyAll()
(9)wait()
(10)wait(long timeout)
(11)wait(long timeout, int nanos)

2. equals 함수에 대하여 설명하시오.
원래 equals 메소드는 이 객체가 다른 객체와 같은지 아닌지를 비교한다
즉, 주소값을 비교한다는 것이다.
두개의 레퍼런스가 동일한 인스턴스를 가르키고 있다면 true를 아니라면 false를 리턴한다.
즉, 주소값을 비교한다는 것이다.
* 단, String 클래스를 equals로 비교할때는 주소값으로 비교를 하는것이 아니라 객체 내용이 같은지 아닌지(문자열 내용)를 비교한다.
*이 이유는 String 클래스는 내부적으로 equals함수를 오버라이딩 하여 재정의가 되어있기 때문이다


3. String 클래스 에서 문자열 비교시 equals를 쓰는 이유는?
String클래스는 Object클래스를 상속받고 있기때문에  equals함수를 오버라이딩 하여 재정의가 되어있기 때문이다


4. shallow copy, deep copy 의 차이는?
shaallow copy(얕은 복사)
deep copy(깊은 복사)는

1. 얕은 복사(Shallow Copy)
정의
객체를 복사할 때, 해당 객체만 복사하여 새 객체를 생성한다.
복사된 객체의 인스턴스 변수는 원본 객체의 인스턴스 변수와 같은 메모리 주소를 참조한다.
따라서, 해당 메모리 주소의 값이 변경되면 원본 객체 및 복사 객체의 인스턴스 변수 값은 같이 변경된다.
2. 깊은 복사(Deep Copy)
정의
객체를 복사 할 때, 해당 객체와 인스턴스 변수까지 복사하는 방식.
전부를 복사하여 새 주소에 담기 때문에 참조를 공유하지 않는다


5. 금일 배운 Rectangle의 shall copy 와 deep copy 일 때의 메모리 그림을 그려보시오.



6. 아래를 프로그래밍 하시오.
- 클래스 Person
* 필드 : 이름, 나이, 주소 선언
- 클래스 Student
* 필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 생성자 : 학교명, 학과, 학번 지정
* 메소드 average() : 8개 학기 평균평점의 평균을 반환
- 클래스 Person과 Student 
- 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.

이름 : 김다정
나이 : 20

주소 : 서울시 관악구
학교 : 동양서울대학교
학과 : 전산정보학과
학번 : 20132222
----------------------------------------

8학기 학점을 순서대로 입력하세요

1학기 학점  → 3.37
2학기 학점  → 3.89
3학기 학점  → 4.35
4학기 학점  → 3.76
5학기 학점  → 3.89
6학기 학점  → 4.26
7학기 학점  → 4.89
8학기 학점  → 3.89

----------------------------------------


=>
import java.util.Scanner;

class Person {
	private String name, address;
	private int age;

	public Person(String name, int age, String address) {
		this.name = name;
		this.age = age;
		this.address = address;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

}

class Student extends Person {
	private String uni, major;
	private int stuNum;

	private double[] grade = new double[8];

	public Student(String name, int age, String address, String uni, String major, int stuNum) {
		super(name, age, address);

		this.uni = uni;
		this.major = major;
		this.stuNum = stuNum;
	}

	public void print() {

		System.out.println("이름" + super.getName());
		System.out.println("나이" + super.getAge());
		System.out.println("주소" + super.getAddress());

		System.out.println("학교" + uni);
		System.out.println("학과" + major);
		System.out.println("학번" + stuNum);

	}

	public double average() {
		double sum = 0;
		double avg = 0;

		for (double d : grade) {
			sum = sum + d;
		}
		avg = sum / grade.length;

		return avg;
	}

	public String getUni() {
		return uni;
	}

	public void setUni(String uni) {
		this.uni = uni;
	}

	public String getMajor() {
		return major;
	}

	public void setMajor(String major) {
		this.major = major;
	}

	public int getSruNum() {
		return stuNum;
	}

	public void setSruNum(int sruNum) {
		this.stuNum = sruNum;
	}

	public double[] getGrade() {
		return grade;
	}

	public void setGrade(double[] grade) {
		this.grade = grade;
	}

	public void setGrade() {

		try {

			Scanner sc = new Scanner(System.in);
			System.out.println("8학기 학점을 순서대로 입력하세요");

			for (int i = 0; i < grade.length; i++) {
				System.out.println((i + 1) + "학기 학점 → ");
				grade[i] = sc.nextDouble();
			}
		} catch (Exception e) {
			System.out.println("잘못된 입력입니다");
			setGrade(); //재귀함수 자기 자신 호출
		}
	}
}

public class StuTest {

	public static void main(String[] args) {
		Student student = new Student("김다정", 20, "서울시", "한국대", "전산학과", 20171265);
		student.print();

		student.setGrade();

		System.out.println("8학기 총 평균 평점은" + student.average());
	}

}

8학기 총 평균 평점은 4.0375점입니다.


7.철수 학생은 다음 3개의 필드와 메소드를 가진 4개의 클래스 Add, Sub, Mul, Div를 작성하려고 한다.

- int 타입의 a, b 필드: 2개의 피연산자
- void setValue(int a, int b): 피연산자 값을 객체 내에 저장한다.
- int calculate(): 클래스의 목적에 맞는 연산을 실행하고 결과를 리턴한다.

곰곰 생각해보니, Add, Sub, Mul, Div 클래스에 공통된 필드와 메소드가 존재하므로 새로운 추상 클래스 Calc를 작성하고,
 Calc를 상속받아 만들면 되겠다고 생각했다. 
그리고 main() 메소드에서 다음 실행 사례와 같이 2개의 정수와 연산자를 입력받은 후, 
Add, Sub, Mul, Div 중에서 이 연산을 처리할 수 있는 객체를 생성하고 setValue() 와 calculate()를 호출하여 
그 결과 값을 화면에 출력하면 된다고 생각하였다. 

철수처럼 프로그램을 작성하라.(예외처리 구문도 넣어 주세요^^)

두 정수와 연산자를 입력하시오 >> 5 7 +


=>

import java.util.Scanner;

abstract class Calc{
	protected int a;
	protected int b;
	
	void setValue(int a, int b) {
		this.a = a;
		this.b = b;
	}
	abstract int calulate();
}

class Add extends Calc{

	@Override
	int calulate() {		
		return a + b;
	}	
}

class Sub extends Calc{

	@Override
	int calulate() {		
		return a - b;
	}	
}

class Mul extends Calc{

	@Override
	int calulate() {		
		return a * b;
	}	
}

class Div extends Calc{

	@Override
	int calulate() {		
		return a / b;
	}	
}


public class CalTest {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.print("두 정수와 연산자를 입력하세요");
		
		int a = sc.nextInt();		
		int b = sc.nextInt();		
		
		String op = sc.next();
		
		Calc cal = null;
		switch (op) {
		case "+":
			cal = new Add();
			break;
		case "-":
			cal = new Sub();
			break;
		case "*":
			cal = new Mul(); //부모 = 자식
			break;
		case "/":
			cal = new Div();
			break;
		default:
			System.out.println("잘못된 입력입니다");
			break;
		}
		cal.setValue(a, b); 
		System.out.println(cal.calulate()); //폴리 적용
	}

8. 문자열을 입력 받아 한 글자씩 회전시켜 모두 출력하는 프로그램을 작성하라.
(클래스로 작성할 필요없이 메인에서 직접 할것)
[Hint] Scanner.nextLine()을 이용하면 빈칸을 포함하여 한 번에 한 줄을 읽을 수 있다.
문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.

I Love you
Love youI
Love youI
ove youI L
ve youI Lo
e youI Lov
youI Love
youI Love
ouI Love y
uI Love yo
I Love you
```


=>
import java.util.Scanner;

public class Test {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.println("문자열을 입력하세요. 빈칸이나 있어도 되고 영어 한글 모두 됩니다.");
		String input = sc.nextLine();

		for (int i = 0; i <= input.length(); i++) {

			System.out.print(input.substring(i));
			System.out.println(input.substring(0, i));
		}
	}
}
