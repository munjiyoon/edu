1. 에러(Error)와 예외(Exception)의 차이는?

프로그램 내에서 처리 할 수 있는 수준은 예의, 핸들링 할 수 없는 것은 에러이다


2. unchecked 와 checked 예외의 차이는?

예외는 RuntimeException ( uncheked) RuntimeException이 아닌 것(cheked)으로 나뉘는데
cheked는 개발자가 예외의 처리를 어떻게 할 것인지 반드시 명시해 주어야 한다


예외의 처리 방법(1. try catch 2.throws)

RuntimeException ( uncheked) 의 대표적인 예외
ArithmeticException
      ClassCastException
      IndexOutOfBoundsException
      NegativeArraySizeException	  
      NullPointerException
      ArrayStoreException 

cheked 의 대표적인 예외
IOException



3. 예외처리(Exception Handling) UML(상속도)참고하여  그리시오.

https://www.baeldung.com/java-catch-throwable-bad-practice


4. throws 에 대하여 설명하시오.
예외의 처리를 위해 사용하며 예외를 호출한 다른 메소드로 넘길 수 있다


5. 아래가 컴파일 에러가 나는 이유에 대하여 설명하시오.
try {
		int num = 6 / 0;
} catch (Exception e) {
		e.printStackTrace();
} catch (InputMismatchException e) {
		e.printStackTrace();
}


try에서 예외가 발생했을 때에는 catch블록이 위에서 아래로 차례로 검사하는데, 
만일 상위 예외 클래스가 더 위에 있었다면 하위 예외 클래스를 실행하지 않게 된다.
즉, 하위 예외 클래스가 상위 예외 클래스를 상속했기 때문에, 상위 예외 클래스를 잡는 catch 블록이 실행되게된다.


6. 사칙연산 계산기를 아래의 조건으로 짜시오.
interface ICalculator {
	int add(int x, int y);
	int sub(int x, int y);
	int mul(int x, int y);
	int div(int x, int y);
}

public class CalculatorMain {

	public static void main(String[] args) {
		ICalculator cal = new Calculator();

		//출력결과 참고 하여 try catch 를 적절히 넣을것  
			System.out.println(cal.add(6, 5));
			System.out.println(cal.sub(6, 5));	
			System.out.println(cal.mul(6, 5));	
			System.out.println(cal.div(6, 0));

	}
}

/*
================================================
11
1
30
java.lang.ArithmeticException: / by zero
	at Calculator.div(CalculatorMain.java:32)
	at CalculatorMain.main(CalculatorMain.java:45)
계산기 종료
*/

interface ICalculator7 {
	int add(int x, int y);

	int sub(int x, int y);

	int mul(int x, int y);

	int div(int x, int y);
}

class Calculator7 implements ICalculator7 {

	@Override
	public int add(int x, int y) {
		return x + y;
	}

	@Override
	public int sub(int x, int y) {
		return x - y;
	}

	@Override
	public int mul(int x, int y) {
		return x * y;
	}

	@Override
	public int div(int x, int y) {
		return x / y;

	}
}

public class Test6 {
	public static void main(String[] args) {
		ICalculator7 cal = new Calculator7();

		// 출력결과 참고 하여 try catch 를 적절히 넣을것
		try {
		System.out.println(cal.add(6, 5));
		System.out.println(cal.sub(6, 5));
		System.out.println(cal.mul(6, 5));
		System.out.println(cal.div(6, 0));
		} catch (Exception e) {	
			e.printStackTrace();//예외 출력
			System.out.println("계산 종료");
		}
	}
}




7.과일, 사과, 배, 포도를 표현한 클래스를 만들고 이들 간의 관계를 고려하여 하나의 클래스를 추상 클래스로 만들어 메소드 print()를 구현하고 
다음과 같은 소스와 결과가 나오도록 클래스를 작성하시오.
- 소스
Fruit fAry[] = {new Grape(), new Apple(), new Pear());
for(Fruit f : fAry)
f.print();

- 결과
나는 포도이다.
나는 사과이다.
나는 배이다.


 abstract class Fruit{
	 public abstract void print();	
}


class Grape extends Fruit{
	public void print() {
		System.out.println("나는 포도이다");
	}
	
}
class Apple extends Fruit{
	public void print() {
	 System.out.println("나는 사과이다");
	}
	
}

class Pear extends Fruit{
	public void print() {
		 System.out.println("나는 배이다");
		}
	
	
}

public class Test {
	public static void main(String[] args) {
		Fruit fAry[] = {new Grape(), new Apple(), new Pear()};
		
		for(Fruit f : fAry)
		f.print();
				
	}
}
